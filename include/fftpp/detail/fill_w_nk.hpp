#pragma once

#include <fftpp/concept/field.hpp>
#include <fftpp/primitive_root_of_unity.hpp>

#include <algorithm>
#include <concepts>
#include <iterator>

namespace fftpp::detail
{
    /*!
        \~english
            \brief
                Generates `w_n^k` elements for FFT

            \details
                For each `n` takes a primitive root of order `n` and writes to the output iterator
                `k` required by the FFT algorithm units of a group, generated by that root.

                    n ∈ {2, 4, 8, ..., size / 2, size},
                    k = n / 2

                All the elements are being written to the same range, one after another.

                Complexity:
                -   Time: `O(size)`;
                -   Memory: `O(1)`, excluding preallocated memory.

            \param first
                Iterator to the beginning of a range to write the result to.
            \param size
                Size of the FFT.

            \returns
                Iterator in the given range, one past the last written element.

            \pre
                At least the `size - 1` elements is available from the `first`
                iterator.
            \pre
                `size = 2 ^ m, m ∈ ℕ`

        \~russian
            \brief
                Сгенерировать коэффициенты `w_n^k` для БПФ

            \details
                Для каждой степени двойки `n` берёт первообразный корень степени `n` и записывает в
                выходной итератор `k` необходимых для БПФ элементов группы, порождённых этим корнем.

                    n ∈ {2, 4, 8, ..., size / 2, size},
                    k = n / 2

                Все элементы записываются подряд в один и тот же диапазон.

                Асимптотика:
                -   Время: `O(size)`;
                -   Память: `O(1)`, не считая заранее выделенной памяти.

            \param first
                Итератор на начало диапазона, в который нужно записать результат.
            \param size
                Размер БПФ.

            \returns
                Итератор за последним записанным элементом.

            \pre
                Из итератора `first` доступно хотя бы `size - 1` элементов.
            \pre
                `size = 2 ^ m, m ∈ ℕ`

        \~
            \see primitive_root_of_unity
            \see unity
            \see fft
     */
    template <std::random_access_iterator I, std::integral D = std::iter_difference_t<I>>
        requires(field<std::iter_value_t<I>, D>)
    I fill_w_nk (I first, D size)
    {
        using K = std::iter_value_t<I>;

        for (auto n = D{2}; n <= size; n *= 2)
        {
            const auto w_n = primitive_root_of_unity<K>(n);

            *first = unity<K>();
            const auto last_for_n =
                std::next(first, static_cast<std::iter_difference_t<I>>(n / 2 - 1));
            first =
                std::transform(first, last_for_n, std::next(first),
                    [& w_n] (const auto & value)
                    {
                        return value * w_n;
                    });
        }

        return first;
    }
}
